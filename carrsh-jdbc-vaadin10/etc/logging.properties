##### Обработчики
### Вывод в консоль
##handlers= java.util.logging.ConsoleHandler
### Вывод в файл
##handlers= java.util.logging.FileHandler
### Оба
#handlers=java.util.logging.FileHandler, java.util.logging.ConsoleHandler
#
##### Уровни логгирования
### FINEST, FINER, FINE, CONFIG, INFO, WARNING, SEVERE,  ALL и OFF
### Уровень глобальный
#.level=ALL
## Уровень вывода в консоль
#java.util.logging.ConsoleHandler.level = WARNING
## Уровень вывода в файл
#java.util.logging.FileHandler.level = WARNING
#
##### Шаблон имени файла
##    "/" локальный разделитель пути
##    "%t" системный временный каталог
##    "%h" значение свойства «user.home»
##    "%g" номер поколения, чтобы отличить повернутые журналы
##    "%u" уникальный номер для разрешения конфликтов
##    "%%" переводит на один знак процента "%")
#java.util.logging.FileHandler.pattern = application%g.log
## Лимит файла в байтах, но сообщение помещается целиком в любом случае. 0 - без лимита, 524288 - 0,5 мегабайта
#java.util.logging.FileHandler.limit = 524288
## Количество ротаций
#java.util.logging.FileHandler.count = 7
## Форматтер, по умолчанию java.util.logging.XMLFormatter
#java.util.logging.FileHandler.formatter = java.util.logging.SimpleFormatter
## Добавлять в файл (true) или создать новый (false)
#java.util.logging.FileHandler.append = true
#
###### Для справки ######
##package myapp.business;
##
##import java.util.logging.*;
##
##/**
##* Demonstrate Java's logging facilities, in conjunction
##* with a logging config file.
##*/
##public final class SimpleLogger {
##
##  public static void main(String... args) {
##    SimpleLogger thing = new SimpleLogger();
##    thing.doSomething();
##  }
##
##  public void doSomething() {
##    //Log messages, one for each level
##    //The actual logging output depends on the configured
##    //level for this package. Calls to "inapplicable"
##    //messages are inexpensive.
##    logger.finest("this is finest");
##    logger.finer("this is finer");
##    logger.fine("this is fine");
##    logger.config("this is config");
##    logger.info("this is info");
##    logger.warning("this is a warning");
##    logger.severe("this is severe");
##
##    //In the above style, the name of the class and
##    //method which has generated a message is placed
##    //in the output on a best-efforts basis only.
##    //To ensure that this information is always
##    //included, use the following "precise log"
##    //style instead :
##    logger.logp(Level.INFO, this.getClass().toString(), "doSomething", "blah");
##
##    //For the very common task of logging exceptions, there is a
##    //method which takes a Throwable :
##    Throwable ex = new IllegalArgumentException("Some exception text");
##    logger.log(Level.SEVERE, "Some message", ex);
##
##    //There are convenience methods for exiting and
##    //entering a method, which are at Level.FINER :
##    logger.exiting(this.getClass().toString(), "doSomething");
##
##    //Display user.home directory, if desired.
##    //(This is the directory where the log files are generated.)
##    //System.out.println("user.home dir: " + System.getProperty("user.home") );
##  }
##
##  // PRIVATE
##
##  //This style has no hard-coded literals, and requires the logger
##  //to be non-static.
##  private final Logger logger=Logger.getLogger(this.getClass().getPackage().getName());
##
##  //This style lets the logger be static, but hard-codes a class literal.
##  //private static final Logger logger =
##  //  Logger.getLogger(SimpleLogger.class.getPackage().getName())
##  //;
##
##  //This style uses a hard-coded literal and should likely be avoided:
##  //private static final Logger logger = Logger.getLogger("myapp.business");
##} 
##
##
## Logger log = Logger.getLogger(LoggingJul.class.getName());
##
##
## Методы логгера могут принимать в качестве аргументов строковые сообщения, шаблоны сообщений, исключения, 
## ресурсы локализованных текстовок сообщений, а также, начиная с Java 8, поставщиков строковых сообщений:
##
##// Строковое сообщение
##String stringMessage = "Сообщение";
##// Строковое сообщение с параметрами
##String stringMessageFormat ="Сообщение {0}";
##// Исключение
##Throwable throwable = new Throwable();
##// ResourceBundle хранящий сообщения
##ResourceBundle resourceBundle = ResourceBundle.getBundle("logging.jul.bundle");
##// Поставщик сообщений
##Supplier<String> stringMessageSupplier = ()->"Сообщение";
##
##
##Выделяется две группы методов: название которых соответствует уровню логгирования и методы log, loggp, logrb, 
##принимающие уровень логгирования в качестве параметра с типом Level. Первая группа содержит методы двух типов: 
##принимающих строковое сообщение или поставщика строковых сообщений:
##
##log.info(stringMessage);
##log.info(stringMessageSupplier);
##
##// Вывести сообщение с указанием уровня логгирования
##log.log(new LogRecord(Level.INFO, stringMessage));
##log.log(Level.INFO, stringMessage);
##log.log(Level.INFO, stringMessageSupplier);
##log.log(Level.INFO, stringMessageFormat, args);
##log.log(Level.INFO, stringMessage, throwable );
##log.log(Level.INFO, throwable, stringMessageSupplier);
##// Вывести сообщение с указанием уровня логгирования, класса и метода
##log.logp(Level.INFO, "ClassName", "MethodName", stringMessage);
##log.logp(Level.INFO, "ClassName", "MethodName", stringMessageSupplier);
##log.logp(Level.INFO, "ClassName", "MethodName", stringMessageFormat, args);
##log.logp(Level.INFO, "ClassName", "MethodName", stringMessage, throwable);
##log.logp(Level.INFO, "ClassName", "MethodName", throwable, stringMessageSupplier);
##// Вывести сообщение с указанием уровня логгирования, класса,
##// метода и resourceBundle, хранящего сообщения
##log.logrb(Level.INFO, "ClassName", "MethodName", resourceBundle, "messageId");
##log.logrb(Level.INFO, "ClassName", "MethodName", resourceBundle, "messageId", throwable);
##// Вывести сообщение об ошибке
##log.throwing("ClassName","MethodName", throwable);
##
##
