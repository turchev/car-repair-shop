
CREATE TABLE client (
	id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	last_name VARCHAR(40) DEFAULT NULL,
	first_name VARCHAR(40) DEFAULT NULL,
	patronnymic VARCHAR(40) DEFAULT NULL,
	phone VARCHAR(40) DEFAULT NULL
);  

CREATE TABLE mechanic (
	id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	last_name VARCHAR(40) DEFAULT NULL,
	first_name VARCHAR(40) DEFAULT NULL,
	patronnymic VARCHAR(40) DEFAULT NULL,
	wages DECIMAL(12,2) DEFAULT NULL,
	phone VARCHAR(40) DEFAULT NULL
);  

CREATE TABLE orders (
	id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	description VARCHAR(5000) DEFAULT NULL,
	client_id BIGINT DEFAULT NULL,
	mechanic_id BIGINT DEFAULT NULL,
	status VARCHAR(50) DEFAULT NULL,
	date_creat TIMESTAMP DEFAULT NULL,
	completion_date TIMESTAMP DEFAULT NULL,
	price DECIMAL(12,2) DEFAULT NULL,
	FOREIGN KEY (client_id) REFERENCES client(id),
	FOREIGN KEY (mechanic_id) REFERENCES mechanic(id)
);  
-- #####################################################################
-- ##### Баловство для общего развития и повторения SQL.           #####
-- ##### В данной задаче в них нет ни какой необходимости.         #####
-- #####################################################################

-- Представление, отображающее в себе все заявки и ФИО вместо forreig_key
CREATE VIEW orders_with_fio AS
	SELECT orders.id, orders.description, orders.client_id, orders.mechanic_id, 
		orders.status, orders.date_creat, orders.completion_date, orders.price,
		CONCAT(client.last_name, ' ', LEFT(client.first_name, 1), '.', LEFT(client.patronnymic, 1),'.') AS client_fio,
		CONCAT(mechanic.last_name, ' ', LEFT(mechanic.first_name, 1), '.', LEFT(mechanic.patronnymic, 1),'.') AS mechanic_fio
	FROM orders
	LEFT JOIN client ON orders.client_id = client.id
	LEFT JOIN mechanic ON orders.mechanic_id = mechanic.id;
	
-- Функция, возвращающая разницу между двумя датами в часах в формате DECIMAL 
CREATE FUNCTION time_diff_out_decimal (date1 TIMESTAMP, date2 TIMESTAMP) 
	RETURNS DECIMAL(12,2)
	LANGUAGE SQL READS SQL DATA	
	BEGIN ATOMIC            
		DECLARE interval_mi INTEGER;
		SET interval_mi = DATEDIFF(minute, date1, date2);
		RETURN CAST((interval_mi) AS DECIMAL(12,2)) / 60;                    
	END 
	
-- Процедура для вывода статистики механика
CREATE PROCEDURE mechanic_stat (IN in_id BIGINT)
	LANGUAGE SQL READS SQL DATA	
	DYNAMIC RESULT SETS 1		
	BEGIN ATOMIC		
		DECLARE cursor_res CURSOR FOR 
			SELECT COUNT(orders_with_fio.id) AS orders_sum, 
				ISNULL(SUM(time_diff_out_decimal(date_creat, completion_date)), 0) AS hh_sum,		
				ISNULL(SUM(orders_with_fio.price), 0) AS price_sum
			FROM orders_with_fio
			WHERE  orders_with_fio.mechanic_id = in_id
			FOR READ ONLY; 
		OPEN cursor_res;    
	END
	
-- Процедура для вывода статистики всех механиков
CREATE PROCEDURE mechanic_stat ()
	LANGUAGE SQL READS SQL DATA	
	DYNAMIC RESULT SETS 1		
	BEGIN ATOMIC
		DECLARE cursor_res CURSOR FOR SELECT mechanic.id, 
			CONCAT(mechanic.last_name, ' ', LEFT(mechanic.first_name, 1), '.', LEFT(mechanic.patronnymic, 1),'.') AS mechanic_fio,
			ISNULL(COUNT(orders_with_fio.id), 0) AS orders_sum, 
			ISNULL(SUM(time_diff_out_decimal(orders_with_fio.date_creat, orders_with_fio.completion_date)), 0) AS hh_sum,		
			ISNULL(SUM(orders_with_fio.price), 0) AS price_sum
		FROM orders_with_fio		
		RIGHT JOIN mechanic ON orders_with_fio.mechanic_id = mechanic.id
		GROUP BY orders_with_fio.mechanic_id, orders_with_fio.mechanic_fio, mechanic.id
		FOR READ ONLY;
		OPEN cursor_res;    
	END
	
SHUTDOWN;
